{
    "pageTitle": "Make a game timer",
    "mainHeading": "Creating a timer",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Setting up the variables",
    "subHeading3": "Update methods",
    "subHeading4": "Render methods",
    "subHeading5": "The end result",
    "subHeading6": "Keeper of the code",
    "pageLink1": "Introduction",
    "pageLink2": "Setting up variables",
    "pageLink3": "Update methods",
    "pageLink4": "Render methods",
    "pageLink5": "The code",
    "p1": "This tutorial will show you how to implement a scoring system, with a nice little effect when the score increases. Give the button above a few clicks to see it in action. It's nice to add little effects like this as it gives a bit of character to elements of the game that's often overlooked stylistically",
    "p2": "First, we'll just set up a simple html page with a canvas with an id of demoCanvas that we'll use to target our canvas in our javascript file. We'll also seperate our javascript into a separate file that we'll call example.js.",
    "p3": "For the canvas above, I've added a background colour just to spruce things up a bit. I'm not going to cover this in the tutorial, but I'll include it in the final code, just to make the canvas look a little nicer.",
    "p4": "That's all we need for setting up, so let's get on with handling the score.",
    "p5": "First we'll need a few variables. We'll be using these to make our rendering a little easier and of course we need a couple to handle the score.",
    "p6": "First, we'll grab the canvas by it's id and assign it's 2d context to ctx. We'll also assign the canvas width and height to variables too to make things a little simpler. We'll also declare an animation variable that we'll assign our main loop to.",
    "p7": "Now, we need a couple of variables to manage the score. The first, score, will be the actual score and the second, displayScore will be the score that's actually rendered. We also need a score increment. We'll be increasing the displayed score by the increment every frame that the displayed score is lower than the actual score. Finally, as we're only rendering one text element, we'll set our font properties on the canvas context here too.",
    "p8": "Now we'll create our update method. This should be fairly short and sweet and we only have one thing to handle.",
    "p9": "For our updateScore method, all we need to do is check if the displayed score is lower than the actual score. If it is, we increment it by the score increment we declared in the variables in the start. If you're managing score like this, it's important to remember to make sure your increment by your possible score increases.",
    "p10": "With our update method all set up. All that's left is to create our render methods and set up our main method. We'll get on with those now.",
    "p11": "Our first method simply clears the canvas, ready for the next redraw. Simply clearing a rectangle from 0, 0 to the width and height of the canvas.",
    "p12": "Our second method will render the score. I've picked a red colour for the fill style, but feel free to pick whatever you'd like. Then we'll just concatenate the string 'Score: ' and the display score variable and render it all in the bottom, middle of the canvas.",
    "p13": "All that's left to do is set up our main game loop. I'll also include the code for the event listener on the button, so we have a way of increasing the score.",
    "p14": "For our main game loop, all we need to do is call the methods that we've created above and call them in the order that we need them to be called. So we, clear the canvas, update the score and then render it. Finally in the main loop the make call requestAnimationFrame again, so the loop continues. Outside of the main loop, we make the intial call to requestAnimationFrame, passing it our main method.",
    "p15": "For the event listener, we're just going to add a click listener to the button, which we'll grab by it's id. Each time the button is clicked we'll increase the score. Our update score method will then start updating our display score until it again becomes equal to the actual score.",
    "p16": "That should be all we need to be up and running. If you look at your canvas you should be all up and running.",
    "p17": "If you want to check your code against mine... or if you've just skipped ahead, I've included the code below for your pleasure. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
