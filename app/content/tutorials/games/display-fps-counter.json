{
    "pageTitle": "calculating FPS",
    "mainHeading": "CALCULATING FPS",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Why it's useful",
    "subHeading2": "Setting up the variables",
    "subHeading3": "Clearing the canvas",
    "subHeading4": "Calculating FPS and execution time",
    "subHeading5": "The end result",
    "subHeading6": "Keeper of the code",
    "pageLink1": "Why it's useful",
    "pageLink2": "Setting up variables",
    "pageLink3": "Canvas setup",
    "pageLink4": "Calculating fps",
    "pageLink5": "The code",
    "p1": "Two of the most useful things I find when creating and debuging a game are a counter displaying frames per second and an output of how long the main game loop is taking to execute. It can be a great indicator of when things have been pushed too far and is great for finetuning variables towards the end of development, such as particle amounts for explosions or the accuracy of collision detection.",
    "p2": "Having a good idea about the execution time of the main draw loop can also be really useful. If you're aiming for 60 fps, the main loop can't take any more than 16.6 seconds to execute.",
    "p3": "Having a frames per second display and the execution time can also help testing across different browsers and different devices. Try opening this page in a different browser or on a mobile, if you're not already doing so. It can be quite suprising how much difference there is!",
    "p4": "The example below is scripted in javascript for an html5 game, but is easily transfered accross to any other language.",
    "p5": "First we'll need a few variables. We'll start by grabbing the canvas element using it's ID property from our html, it's context that we'll use for drawing on. We'll call this ctx: This seems to be pretty standard and as it's used a heck of a lot when working with the canvas, it's nice and short too. We'll also need another variable to use for assigning the main event loop to. This way we'll have something to use to cancel it if needed.",
    "p6": "Well also need some variables for storing and comparing timings. First we'll use lastTime, this is going to be used as the comparison to the time that will get passed to our main draw loop. We'll set this to 0. Then we'll use executionTime, which again we'll set to 0 to start with. This will store, you've guessed it, the exection time of the main loop.",
    "p7": "Third up, is deltaTime, this is a name commonly used across multiple languages and is used to refer to the times between to frames executing. It has many uses - I tend to use it for calculating the movement of items, so a game will not suffer if the frame rate drops and the user experience remains consistent. Last up, we'll use fps, to store the current frames per second.",
    "p8": "We should have something that looks like this:",
    "p9": "We need the frames per second counter to be readable, so we'll need to clear the canvas after each draw. We'll create a function named clearCanvas that will clear down the canvas from point 0, 0 to the canvas width and height.",
    "p10": "To make things a little more interesting, we'll also colour the canvas just to spruce it up a bit. Create a method that will fill the width and height with any colour. I've gone for a very dark grey, but any colour will do.",
    "p11": "We'll create the main draw method, and call it main. In it, we'll call our clearCanvas method and our renderBackground method. As we'll be using the mighty requestAnimationFrame we also need to call it again at the end of our loop and assign it to the animation variable we created earlier.",
    "p12": "Finally we need to call requestAnimationFrame, assigning it to our animation variable. If you're new to canvas, requestAnimationFrame is a fantastic method for handling the repeated function calls as it self optimises to run, or at least try to run at 60fps. It also handles a lot of other problems that came about from trying to use setTimeout, or setInterval.",
    "p13": "All that's left is to calculate the times and assign them to variables we created earlier so that we can render them on the canvas. For that, we'll just need a couple more methods.",
    "p14": "First we'll create a method called setDeltaTime. This was get passed the time given to our main draw function by requestAniamtionFrame, which is the time in milliseconds since the page loaded. We set deltaTime to (time - lastTime) / 1000 to get a decimal value of seconds, then set lastTime to time, ready for the next loop to run.",
    "p15": "Next we need a method to update the frames per second counter that we set the fps variable for. We could just set fps to 1 / deltaTime, but it would be quite long, so i prefer to add cut it down to one decimal place with the toFixed method.",
    "p16": "All that's left from fps is to render the outcome on screen. We need a render method that can handle rendering both the fps and the execution time. We can set the fill colour to white, and use the text align ptoperty on the drawing context to easily position the text relative to the left and right of the canvas.",
    "p17": "With the exception of colours I like to set any properties I change back to their defaults before I finish off a method. It can get confusing otherwise, and it's far more performant than saving and restoring the context between each change.",
    "p18": "Last but not least, inside the main method, we'll add these three methods, remembering to place them in draw order. Finally, create two variables within the main method, startTime at the start and endTime just before recalling requestAnimationFrame. Set these both to performace.now() which is similar but far more precise than Date.now(). Below endTime, set executionTime to (endTime - startTime).toFixed(1) and we're done!",
    "p19": "That should cover everything. Looking at your canvas now, you should be displaying both the current frames per second count and the time the previous frames execution time. Try playing around to try and increase the execution time to get an idea of what's possible. Try drawing 1000's of rectangles in a for loop each frame. You might be suprised how many can fit into 16ms!",
    "p20": "Your main method whould now look like below:",
    "p21": "If you want to check your code against mine... or if you've just skipped ahead, I've included the code below for your pleasure. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
