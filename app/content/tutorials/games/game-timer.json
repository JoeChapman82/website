{
    "pageTitle": "Make a game timer",
    "mainHeading": "Creating a timer",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Setting up the variables",
    "subHeading3": "Update methods",
    "subHeading4": "Render methods",
    "subHeading5": "The end result",
    "subHeading6": "Keeper of the code",
    "pageLink1": "Introduction",
    "pageLink2": "Setting up variables",
    "pageLink3": "Update methods",
    "pageLink4": "Render methods",
    "pageLink5": "The code",
    "p1": "This tutorial will show you how to make a simple game timer that will count down the remaining game time and change colours between green and red as the time ticks away. I think this is a nice little effect that adds a sense of urgency to the game when time is running out. The timer itself is fairly simple to build, so with a bit of luck, this should be a fairly short tutorial.",
    "p2": "First, we'll just set up a simple html page with a canvas with an id of demoCanvas that we'll use to target our canvas in our javascript file. We'll also seperate our javascript into a separate file that we'll call example.js.",
    "p3": "For the canvas above, I've added a background image just to spruce things up a bit. I did this with css as to not waste precious resources rendering an image each frame. I'm going to leave the background out of the tutorial as I'm just trying to cover the timer.",
    "p4": "That's all we need for setting up, so let's get on with making the timer.",
    "p5": "First we'll need a few variables, for keeping track of various timings and the positions of the elements on the canvas.",
    "p6": "First, we'll grab the canvas by it's id and assign it's 2d context to ctx. We'll also assign the canvas width and height to variables too to make things a little simpler. We'll also set a variable, padding to 40.",
    "p7": "Next, we need some variables for the timers. We'll be calculating the time taken for each frame so we'll instantiate lasTime and deltaTime to 0 and we'll declare animation which will be a reference to our main loop. Now, we'll instantiate gameTimer to 0 and gameTime to 10. You can set gameTime to however long in seconds you would like you're timer to last. Finally, we'll set some font properties on the canvas context. We won't need to change them at all throughout the loop so it makes sense to set them here. We're setting the font size, center aligning the font, and setting a baseline that means the bottom of our text will sit at the point of the y axis that we use.",
    "p8": "Now we'll make our two update methods. We need one for maintaining deltaTime, so we know how much time has passed between each frame. Second we need a method to update our game timer.",
    "p9": "Methods like the ones above will become more and more familiar to you the more you work with the canvas. I usually use the setDeltaTime method in almost everything I create as it's uses are boundless.",
    "p10": "For the first method. We're simply taking the time between each time the method is called, which is essentially the time it's taken for the frame to run. We'll be using the fantastic requestAnimationFrame for the game loop, which will try it's best to call the main method 60 times per second. What we're also doing here is checking to see if the time taken is unusually long. At 60 frames per second, the frame time should be 0.16. There are instances where this could be much higher, for example if the canvas has lost focus because a user has changed browser tabs or various other reasons. Because of this, we'll check if the time is greater than 0.1 seconds and decrease it to a standard time if it is. This will prevent any unwanted jumps in time.",
    "p11": "For the next method, all we need to do is subtract deltaTime from our gameTimer every frame. For the example when the timer reaches 0, it is being reset to the default time. If we were making an actual game this is where we would handle game over, or other methods we need to call when the game timer runs out.",
    "p12": "With our update methods all set up. All that's left is to create our render methods and set up our main method. We'll get on with those now.",
    "p13": "First up we'll handle rendering our game timer. This might be a little simpler than youd think. We'll break it down in to three seperate parts: The outline, the timer and the text. We'll be using hsl for our colours which is going to make the transition from green to red as simple as possible. To transition from green to red, the saturation and light values stay the same, at 100% and 50% respectively. The only value we need to change is the hue. As it happens a hue of 120, with our other values is green, and a hue of 0 will make red. A hue of 60 is orange, so we'll pass from green, through yellow and orange and end at red.",
    "p14": "We calculate our hue by multiplying 120 by the gameTimer over gameTime, so when the gameTimer is at maximum, the value is 100% of 120, at it's minimum value, it's 0% of 120 or 0. Next we need to know the width of the timer. We calculate this exactly the same way by taking the width of the container and setting the timer width to the percentage complete of the game timer.",
    "p15": "With the variables set up, all there is to do is render. We set the context fill style to a semi opaque grey and use the ctx rect method to render a rectangle with the width of the canvas minus the padding. We then render a second rectangle inside the first, passing in our calulated hue to an hsl string to form the fill style and rendering the rectangle with the width we calulated above. Finally, without changeing the fillstyle, we render the timer text directly above the timer bar.",
    "p16": "Our second method simply clears the canvas, ready for the next redraw. Simply clearing a rectangle from 0, 0 to the width and height of the canvas.",
    "p17": "Finally, well just set up our main method which will call all all our other methods in the order we want to handle them and finally call requestAnimationFrame again, setting it to the animation variable we declared up top. Outside of our main method. We'll start our gameTimer off as the same value of gameTime and make our initial call to requestAnimationFrame",
    "p18": "That should be all we need to be up and running. If you look at your canvas you should be all up and running.",
    "p19": "If you want to check your code against mine... or if you've just skipped ahead, I've included the code below for your pleasure. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
