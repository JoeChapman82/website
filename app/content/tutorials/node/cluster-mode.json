{
    "pageTitle": "Cluster Mode",
    "mainHeading": "Cluster Mode",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Setting up a server",
    "subHeading3": "Cluster mode",
    "subHeading4": "Handling failure",
    "subHeading6": "Conclusion",
    "subHeading7": "Complete Code",
    "pageLink1": "Introduction",
    "pageLink2": "Setting up",
    "pageLink3": "Cluster mode",
    "pageLink4": "Handling failure",
    "pageLink5": "Conclusion",
    "p1": "As NodeJs runs on a single thread by default, it doesn't take advantage of the power available to it when running on muti-core machines. With cluster module, which is part of the Node core, you can run multiple processes, one for each core the machine has, which can vastly impove performance.",
    "p2": "It's worth noting that if your node application is running on a machine with just one core, the module will not offer any performance improvements. If your running on a machine with many cores, the performance increases can be vast.",
    "p3": "In this tutorial, we'll be setting up a simple server and then utilising the cluster module to let it work at it's true potential. We'll only be using modules available in the node core, so I'm going to skip creating a package.json file etc and just jump straight in.",
    "p4": "We'll start by creating a basic http server, using the http module. Create a file called app.js, or whatever you'd like to call it. We'll require the http module and set a variable for the port the server will run on.",
    "p5": "Next we need to create our request handler. This will accept the request and response objects and send a simple Hello World response to anything that comes it's way. Then we need to instantiate our server which we'll do by calling the http.createServer method and passing it the response handler we just created.",
    "p6": "All that's left to do for the server for it to listen out for incoming requests. We'll call the listen method on our server and then simply log out a message for success or failure. With that done, we're all set to move on to the cluster module.",
    "p7": "Now on to setting up our clustered server. We'll need a couple more requires, up at the top. First is cluster and second is 'os' which again is part of the node core and contains some operating system related utility methods. We'll be using this to discover the number of cores.",
    "p8": "The code behind the cluster is actually quite simple. We just need an if statement to run at startup. We first check to see if the process that's running is the master process. If it is, we use the os module to get the number of cores and then use a simple for loop to fork a worker process for each of the cores that are found.",
    "p9": "If the process isn't the master process, we'll be using the code we wrote earlier to spin up the server. Before that however, it's best that we cover any failures.",
    "p10": "To handle any failures, we'll wait for the cluster module to emit any exit events. If there happens to be one, we'll log out the number of theworker process that has exited and spawn a new worker process. This way we can always keep the same number of workers.",
    "p11": "That's about all there is to it. We take our code for instantiating a server and wrap it in the section of code that runs for all worker processes and we should be good to go. The complete code should look a lot like this:",
    "p12": "That should be everything you need to get up and running. If you execute the file from the terminal with 'node app.js', you should see a log statement for each of the processes that start up. If you make a few requests to localhost:3050 from a browser, you may notice that you often if not always get a message back from the same worker unless you've got some pretty nifty refreshing skills. You can check everything is working properly by curling a few simultaneous requests of to the server with the following code in a terminal:",
    "p13": "After running that, you should see a response from three seperate workers.",
    "p14": "So there you have it. x processes for the price of one. Or thereabouts at least. It's worth running some performance tests against if you want to see the real differences. It has to be said though that for the work needed to implement, the rewards are really worth it.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
