{
    "pageTitle": "Drawing Triangles",
    "mainHeading": "Drawing Triangles",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Drawing a triangle",
    "subHeading3": "Filling a triangle",
    "subHeading4": "Making a method",
    "subHeading6": "Conclusion",
    "subHeading7": "Complete Code",
    "pageLink1": "Introduction",
    "pageLink2": "Stroking",
    "pageLink3": "Filing",
    "pageLink4": "Method",
    "pageLink5": "Conclusion",
    "p1": "Drawing simple shapes is one of the building blocks within the canvas element. Within the 2d canvas world, most things can be broken down into squares, circles and triangles. As you learn more and more you'll find uses for them everywhere. Unlike squares from the previous tutorial, there isn't a provided method for triangles. So it's a little tougher, but just like connecting the dots.",
    "p2": "To set up, we'll create an example.html file and an example.js and store them in the same place. We'll link the example.js file at the bottom of our example.html file, which will only need to contain some boilerplate html and a canvas tag with an ID property of exampleCanvas, a width of 600 and a height of 300. All the necessary code is included below.",
    "p3": "First up we'll draw a simple triangle to the left of the canvas. In our javascript file we'll start by using getElementById to assign the canvas to a variable called canvas. We'll then get the canvases 2d context and assign it to a variable named ctx. We'll also give our canvas a nice background colour with the fill rect method.",
    "p4": "For the triangle we need to use a path. We'll start by setting the stroke style of the canvas context to red. Then we call begin path. We use the moveTo method to move to the x and y position of he canvas that we want to start drawing. Then we use the lineTo method to plot out a line to the next x and y co-ordinates that we want to draw to. Next we use the lineTo method again to plot out the second line. For the third line, we could use the lineTo method again but instead, we'll just call close path, and that will connect up the two lines for us. Finally we'll call stroke to actually draw the triangle.",
    "p5": "You should have something that looks like this:",
    "p6": "Next up we'll use the make a filled triangle which can be just a little bit different from just an outline.",
    "p7": "Creating a filled triangle is a little simpler than a triangle outline. We can take advantage of the fact that the canvas will automatically close our path when we call the fill method. We'll start of the same way, move to an x, y position and use line to to draw lines to two more positions. Once we're done, we just call fill and the triangle will be finished off and filled with just one call. Magic.",
    "p8": "If this is something you'll be using frequently, it would be easier to create a triangle creating function to help keep you code dry. We'll cover how to do that here.",
    "p9": "We'll create a method that will take 7 parameters. The context that we wish to draw on and 3 sets of and x and y co-ordinates representing the points of the triangle that we wish to draw.",
    "p10": "The function itself will simply call all the required methods needed to form a triangle. First begining a path, moving to a point and then drawing two lines. We'll finally call closePath so we can use our method both for stroking and for filling.",
    "p11": "Then all that's left is to put our function to use. We'll change the fill colour again. We'll use pink to brighten things up a little bit. Now we'll call our function with the canvas context and 3 sets of x and y co-ordinates. Finally we'll call fill so that the triangle is filled.",
    "p12": "If you're following along at home, yours should look an awfully lot like this:",
    "p13": "That covers all the basics of triangles. Have a play around with what you've got so far. Make different types of triangles. See what you can do with them. There's a lot of fun to be had.",
    "p14": "I've included the complete code below. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
