{
    "pageTitle": "Drawing Squares",
    "mainHeading": "Drawing Squares",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Draw an outline",
    "subHeading3": "Filling the square",
    "subHeading4": "Drawing squares along paths",
    "subHeading5": "Drawing a background",
    "subHeading6": "Conclusion",
    "subHeading7": "Complete Code",
    "pageLink1": "Introduction",
    "pageLink2": "Outlines",
    "pageLink3": "Filling",
    "pageLink4": "Paths",
    "pageLink5": "Conclusion",
    "p1": "Drawing simple shapes is one of the building blocks within the canvas element. Within the 2d canvas world, most things can be broken down into squares and circles. As you learn more and more you'll find uses for them everywhere. As with most things in Javascript, there is more than one way to handle drawing squares and rectangles. We'll cover all three here.",
    "p2": "To set up, we'll create an example.html file and an example.js and store them in the same place. We'll link the sxample.js file at the bottom of our example.html file, which will only need to contain some boilerplate html and a canvas tag with an ID property of exampleCanvas, a width of 600 and a height of 300. All the necessary code is included below.",
    "p3": "First up we'll draw a simple outline of a square to the left of the canvas. In our javascript file we'll start by using getElementById to assign the canvas to a variable called canvas. We'll then get the canvases 2d context and assign it to a variable named ctx",
    "p4": "For the square, we'll use the strokeRect on the canvas context. This method takes four parameters. The starting point on the x axis of the canvas, the starting point on the y axis of the canvas, the width of the rectangle and finally the height of the rectangle. We'll use 50, 100, 100 and 100 to form a square on the canvas.",
    "p5": "You should have something that looks like this:",
    "p6": "Next up we'll use the canvas contexts fillRect method to create a square that's filled. This method takes the same parameters as the strokeRect method: x, y, width and height. Well place this quare to the right of the first one, at 250, 100, 100, 100",
    "p7": "If all has gone acording to plan, you should now have to squares sitting side by side, one empty and one filled. Like this:",
    "p8": "Now things get a little more complicated. The first two methods are great if you're just wanting to draw or fill a solitary square, but if your wanting to make multiples, it's less resource intensive to do it within a path, so that only one call to the stroke or fill methods are made.",
    "p9": "First we need to call the beginPath method on the canvas context. We're also going to set the stroke and fill styles. We can only do this once within a path. The stroke and fill styles will take arguments in any form that can be used in css, so litereal colour names, hex values, rgb, rgba, hsl and hsla.",
    "p10": "Now image that the path places a cursor on the canvas that follows your instructions, a little like tracing. We start by marking out a square with the context rect method. This takes the same parameters as the two methods from earlier: x, y, width and height. Then we use moveTo, to move the cursor to the bottom middle of the first square and use lineTo to mark out a line down 50 units.",
    "p11": "Both the moveTo and lineTo take two parameters, an x co-ordinate and a y-co-ordinate. Next we use the rect method again to mark out another square directly before the first one. Finally we call the fill method then the stroke method. The order here is important. By default, the canvas draws items in order, one on top of one another. If we used the fill method after the stroke method, the stroke colour would be hidden beneath the fill colour.",
    "p12": "If you're following along at home, yours should look an awfully lot like this:",
    "p13": "Another use for the rect methods are for making backgrounds. The canvas is rectangular in shape after all. We'll finish off by making a nice background for our canvas.",
    "p14": "Towards the start of our code, just after we've declared our variables, we'll set the canvas fill style to a nice turquoise colour. Feel free to pick any colour you would like if you're not keen on turquoise. The we use the fillRect method to fill the canvas from 0, 0 on it's x and y axis and use the width and height of the canvas as our second two arguments. This way the whole canvas will get filled. After this, we'll just set the fill and stroke style back to the default of black, so the other squares draw as expected.",
    "p15": "That about covers everything for squares. Have a play around with what you have so far. Move the squares around or partially outside the canvas. Try overlapping them. You should learn a lot about how the canvas works just for playing around.",
    "p16": "I've included the complete code below. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
