{
    "pageTitle": "Drawing Circles",
    "mainHeading": "Drawing Circles",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Drawing a circle",
    "subHeading3": "Drawing semi circles",
    "subHeading4": "Drawing Pacman",
    "subHeading5": "Calculating degrees to radians",
    "subHeading6": "Conclusion",
    "subHeading7": "Complete Code",
    "pageLink1": "Introduction",
    "pageLink2": "Cicles",
    "pageLink3": "Semi circles",
    "pageLink4": "Pacman",
    "pageLink5": "Conclusion",
    "p1": "Drawing simple shapes is one of the building blocks within the canvas element. Within the 2d canvas world, most things can be broken down into squares and circles. As you learn more and more you'll find uses for them everywhere. Unlike squares from the previous tutorial, there isn't a provided method for circles. So put your math hat on, and let's make some circles.",
    "p2": "To set up, we'll create an example.html file and an example.js and store them in the same place. We'll link the example.js file at the bottom of our example.html file, which will only need to contain some boilerplate html and a canvas tag with an ID property of exampleCanvas, a width of 600 and a height of 300. All the necessary code is included below.",
    "p3": "First up we'll draw a simple circle to the left of the canvas. In our javascript file we'll start by using getElementById to assign the canvas to a variable called canvas. We'll then get the canvases 2d context and assign it to a variable named ctx. We'll also give our canvas a nice background colour with the fill rect method.",
    "p4": "For the circle we'll be using the arc method on the canvas context. This method takes 6 parameters, of which the last is optional. The parameters are the x and y co-ordinates of the center of the circle, the radius of the arc, the starting point of the arc in radians and the ending point of the arc in radians. The final optional parameter is a boolean value to set the arc to be drawn counter-clockwise. We'll be creating a full circle, so we'll pass the arguments 100, 150, 50 for the x, y and radius parameters, 0 for the starting position and 2 * Pi for the ending position, which marks out the start and end of the arc at the 3 o'clock position of the circle.",
    "p5": "You should have something that looks like this:",
    "p6": "Next up we'll use the canvas arc method again. This time to create a couple of semi circles by utilising the arc methods optional parameter.",
    "p7": "This time we're drawing two arcs. The first we'll place it's centre a little above the center of the canvas at 300, 145. We'll apply the same radius as we did for the previous circle and pass 0 and Pi as the start and end point arguments. We'll also pass true for the optional parameter, so the arc is drawn counter clockwise from the 3 o'clock position to the 9 o'clock position. The second arc, we'll place 10 units lower and pass the same arguments, except this time we'll pass false as the optional parameter so that the arc is drawn clockwise from 3 o'clock to 9 o'clock. I'm just adding the argument in to show what's going on: if it isn't passed, then the default is false.",
    "p8": "There's a lot of fun to be had with the arc method. We'll cover a quick pacman example and then I'll cover a function for converting degrees to radians to make plotting the arcs simpler.",
    "p9": "First we'll set the contexts fill style to a nice orange yellow colour. We'll use the arc method again, but this time, we're not going to form a complete circle we'll start at .2 * Pi and end at 1.8 * Pi, which works out a rougly the 4 and 2 o'clock poitions on the clock.",
    "p10": "Now, without closing the path. We'll use the line to method to make a line to the center of the circle. Finally we'll call the fill method. Even though we haven't formed a line back to the start, when we call the fill method, the shape is automatically closed so the line back to the start is made for us.",
    "p11": "Now we'll use the arc method again to draw a smaller circle, with a radius of 7 just up and right from the center of the circle. We'll set the fill style to black and fill this circle as ewll. This will make the eye. By default, the canvas draws each item in order, covering any items that are underneath it.",
    "p12": "If you're following along at home, yours should look an awfully lot like this:",
    "p13": "It can be a little confusing and hard to follow always passing values in radians so we're going to make a short function to make things a little easier for ourselves.",
    "p14": "We'll create a small function and call it degreesToRadians which will take one parameter, degrees. It will return degrees * pi over 180. Now we can use it for the pacman shape that we create earlier. Just replace the two final arguments with a call to our new function, passing in 30 and 330 degrees. Much easier.",
    "p15": "That about covers everything for the basics of circles, but we;ve only really scratched the surface. Try having a play around with some arcs. Make a few paths joining arcs and lines. Try using a for loop to create differing portions of a circle.",
    "p16": "I've included the complete code below. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
