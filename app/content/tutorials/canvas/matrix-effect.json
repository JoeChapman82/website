{
    "pageTitle": "Creating the Matrix effect",
    "mainHeading": "Creating the Matrix effect",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Setting up the variables",
    "subHeading3": "Helper functions",
    "subHeading4": "Update method",
    "subHeading5": "Update method summary",
    "subHeading6": "Render method",
    "subHeading7": "Complete Code",
    "pageLink1": "Introduction",
    "pageLink2": "Setting up",
    "pageLink3": "Helpers",
    "pageLink4": "Update",
    "pageLink5": "Render",
    "pageLink6": "Conclusion",

    "p1": "I thought it would be interesting to have a go at recreating the effect from the matrix with the canvas. I had a look around to see what had already been created, but a lot of the examples I saw looked a little hectic. I wanted to create something more ordered so I came up with this. It's a little more resource intensive than alot of the examples that I came across but I really like the look of it. I'll cover everything needed to create it here.",
    "p2": "To set up, we'll create an example.html file and an example.js and store them in the same place. We'll link the example.js file at the bottom of our example.html file, which will only need to contain some boilerplate html and a canvas tag with an ID property of exampleCanvas, a width of 600 and a height of 300. All the necessary code is included below.",
    "p3": "First up we'll set up some variables. We need the canvas and it's context. We'll instantiate charSets to an empty array. This is where we'll be storing the sets of charcters in each row. We also need some japanese characters to display. Feel free to copy the ones from the box below. We'll place the characters into an array by calling split on the end of the string, to save manually typing out the array. We'll also set the fontSize to 16 and a fade rate of 0.03. These will be used for the characters. The fade rate will represent the decrease in opacity between characters in the string.",
    "p4": "Just a few more. We'll set the number or white characters. These will be the characters that lead each coloumn. Then a little but of maths. We'll set a max character amount. We'll be adding additional chacters into an array, so we don't want the array to get unnecessarily large. We get this by dividing 1 by the fade rate and adding the number of white characters. Any other characters after this point would have an opacity of 0, meaning they would be invisible. We'll also set a number of columns to the width of the canvas divided by the font size, so the columns will fill the width of the canvas. Finally, we'll set the canvas context font size here as it will remain the same throughout.",
    "p5": "We'll set up a few helper function to help keep our code dry.",
    "p6": "We'll create a function to select a random character from the chars array we created. We're just going to multiply the length of the characters array by Math.random and round it down to the next integer.",
    "p7": "Our character sets are going to be an array of objects. Each object will be a position, which we'll be using to calculate the characters y position on the canvas. We don't want all the columns to fall down in unison, so we set the position to a random number betewen 0 and -100. We also need an array of characters, but we'll create the array with just one character in it.",
    "p8": "Finally, we'll create an initialisation method that will create a character set for each of our columns, using random character and build character set functions tha we just created.",
    "p9": "With our helper functions created. We can move on to creating the update and render functions. These will be a little longer than the helper functions but hopefully still manageable.",
    "p10": "When we execute our initialisation method. It will populate our charSets array with an object containing a y position and a character. There will be one object for each of the columns of characters that will cascade the screen. In our update method, all the need to do is manage everything within that array.",
    "p11": "So, we use a for loop to loop over each object in the charSets array. We use the unshift method to insert a new random character at the start of the array of characters container with in one of the charSets objects, pushing all other characters in the array down one position. Then, we don't want the character array to get unnecessarily long, so we set the length of the character to array to the minimum value out of it's current length and the maximum character variable we set at the start. This will clear out each item passed the lower of the two values. Next we increment the position by one, which will lower it's position on screen.",
    "p13": "At each update, there are two possibilities, either the whole column of letters have passed the bottom or the canvas, or they're still visible. So we check the position. We multiply it by the fontSize to get a y position on the canvas. This value needs to be higher than the height of the canvas, plus the length of a column. If the whole column is out of view, we assign a new charSet to that position of the charSets array, so it again has a position less than 0 and a single character. Our else statement covers sets of characters that are above the bottom of the canvas. We'll loop over that array of characters with a forEach loop. We give each character seen by the loop a 2% chance of changing to a new character.",
    "p14": "Phew, that was a bit lengthly. To summarise, for each column of characters we insert a random character at the start, so the lowest character in the coloumn is always changing. If a column passes the bottom of the canvas it resets back to the top. Each character except the first has a 2% chance of changing.",
    "p15": "The final things we have to do are to set up the render method and to set up the main draw loop. These should both be a lot simpler than the update method. We'll cover both of these here.",
    "p16": "We'll start the render method by filling the canvas with a background colour. We'll set the fill colour to black and fill a rectangle the width and height of the canvas. Next, we loop over all the objects in the charSets array. For each object we get it's current position and set a starting opacity of 1.",
    "p17": "Then we need to loop over the chars array within each charSet. First we check to see if the character we need to render is within the visible canvas. We dont' need to render it if it's not. The next line is a bit messy. We check to see if the character we're rendering should be coloured white or green. We concatenate a string to form an rgba colour value using the rgb values and the current opacity. We decrease the opacity of the white characters faster and we decrease the green characters at the fadeRate we set in the variables.",
    "p18": "Finally we render the character by using the fillText method, passing the character as the text, the loop index times the font size for the x value and the text position times the font size for the y position. We then decrement the text position variable by one and the opacity by our fade rate.",
    "p19": "To summarise, for each character in a charSets chars array we pick the colour, move up one position and render the next character directly above it, decrementing the opacity for each subsequent character.",
    "p20": "Now for the main draw loop.",
    "p21": "Inside our main method, we don't want to the updating our character positions 60 times per second, as the characters would move quickly. We'll use the modulus operator to ensure our updaet method is called every 5 frames. Then on each frame, we'll clear the canvas, render the matrix and make another call to requestAnimationFrame. Outside of our main method we'll call our initialisatin method and make the initial call to requestAnimationFrame. Finally, we'll ensure that all of our code is encapsulated within our immediately involed function.",
    "p22": "So there you have it. If you've followed along, everything should be running smoothly. I've included the complete code below in case you've hit any problems. Try having a play around with what you've got, maybe add a few diffrent shades of green for columns and store them in charSet object. One word of advice though would be to be careful of varying the font size. Firefox specifically, doesn't handle rendering and manipulating fonts with the canvas very well, so if you want to play around with font size, it would be better to check which browser is being used and keep a static font for firefox.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
