{
    "pageTitle": "Making an Audio Visualiser",
    "mainHeading": "Making an Audio Visualiser",
    "authorHeading":"A tutorial by Joe Chapman",
    "subHeading1": "Introduction",
    "subHeading2": "Setting up the variables",
    "subHeading3": "Managing time and the draw loop",
    "subHeading4": "Creating the spinner",
    "subHeading5": "Conclusion",
    "subHeading6": "Complete Code",
    "pageLink1": "Introduction",
    "pageLink2": "Setting up",
    "pageLink3": "Managing time",
    "pageLink4": "Spinning",
    "pageLink5": "Conclusion",
    "p1": "This was a project that I got a lot of enjoyment out of making, so it's nice to be able to share it. The code behind it isn't too complicated, and I'll go over what everything is doing so it should be easy enough to modify the code to make different designs by the end of the tutorial. The hardest part I found about creating this was managing to stay focused and not spend ours just watching different music.",
    "p2": "To set up, we'll create an example.html file and an example.js and store them in the same place. We'll link the example.js file at the bottom of our example.html file, which will need to contain some boilerplate html and a canvas tag with an ID property of exampleCanvas, a width of 600 and a height of 300. All the necessary code is included below.",
    "p3": "We'll also need an input with a type of file so it's possible to select music, and an html audio element which we will keep displayed. We'll be autoplaying the music once it's been selected but some browsers and devices disable this behaviour so we'll leave the element displayed for that reason. We will hide the download control though which we do by setting the controlsList with an attribute of nodownload.",
    "p4": "Now we'll set up the main draw loop and make a quick helper function for managing time.",
    "p5": "For the manage time function, we're taking the time that we'll get from requestAnimationFrame and adding the time elapsed since the previous frame to our totalTime variable. We get the elapsed time by subtracting the time from the lastTime variable which we assign on each loop iteration.",
    "p6": "We'll create a main function. All we'll do in the main function for the time being is cleardown the canvas, call our manage time function and make another call to requestAnimationFrame passing in our main method. RequestAnimationFrame will pass our main method the time since the page loaded on each iteration. Finally, outside of our main function, we'll make the initial call to requestAnimationFrame, passing in our main method.",
    "p7": "Now the fun part. Making the spinner. It's not too much code, so I'll just pop it here and then cover it in detail below.",
    "p8": "Not too bad after all. We'll break it down. First up we need to find the initial rotation. We'll be making a complete rotation of the canvas once per second and we need to rotate the canvas as many times as there are parts to the spinner. So, if there were two parts to the spinner, this value would only change twice per second, if there were 8 parts to the spinner, it would change 8 times.",
    "p9": "After that we translate the canvas, remapping the canvas center to 0, 0 and rotate it by the amount we just calculated.",
    "p10": "Now for the rendering. We need to use a for loop to cover all of parts of the spinner. On each of the for loop iterations, we rotate the canvas again, so a full rotation of the canvas is made each frame. We also set the alpha value of the rgba colour, we divide i by the spinnerParts amount so that the calulcated value increases from just above 0, to 1 for each of the parts which makes each successive part darker. Finally in the for loop, we draw one of the spinnerParts. Remember to restore the canvas after the for loop and to invoke the new function within the main method.",
    "p11": "So there you have it a comlplete functioning loading spinner, ready for any use you have for it. Try fiddling around with it to see what you can make it do. Instead of using circles for the parts, try using lines with a heavy line width, or rounded rectangles. You should be able to cover most different designs with just minor changes to the method. I've included the complete code below, in case you've hit a snag.",

    "p12": "If you're following along at home, yours should look an awfully lot like this:",
    "p13": "That covers all the basics of triangles. Have a play around with what you've got so far. Make different types of triangles. See what you can do with them. There's a lot of fun to be had.",
    "p14": "I've included the complete code below. I hope you've enjoyed the tutorial.",
    "otherTutorials": "Some other tutorials that you might enjoy"
}
