{{ code.exampleCodeBlock('j', 30, [
    {i: 0, t: 'ddmokv', c: ['Ball', 'prototype', 'update', ' = ', 'function', '() {']},
    {i: 4, t: 'kvonv', c: ['var', ' hit', ' = ', 'false', ';']},
    {i: 4, t: 'z', c: ['// handle the update for invisible balls']},
    {i: 4, t: 'kvdpv', c: ['if', '(', 'this', 'invisible', ') {']},
    {i: 8, t: 'dpodpovnvpodpodpovovonvonv', c: ['this', 'x', ' += ', 'this', 'x', ' < ', 'players[', '1', '].', 'x', ' - ', 'this', 'width', ' ? ',
        'this', 'vx', ' * ', 'horizontalUnit', ' * ', '(deltaTime', ' * ', '1.5', ')', ' : ', '0', ';']},
     {i: 8, t: 'dpodpovnvpodpodpovovonvonv', c: ['this', 'y', ' += ', 'this', 'x', ' < ', 'players[', '1', '].', 'x', ' - ', 'this', 'width', ' ? ',
        'this', 'vy', ' * ', 'verticalUnit', ' * ', '(deltaTime', ' * ', '1.5', ')', ' : ', '0', ';']},
    {i: 8, t: 'dpodpovodpodpodpovodpodpv', c: ['this', 'vy', ' = ', 'this', 'y', ' > ', 'borderWidth', ' && ', 'this', 'y', ' + ',
        'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'vy', ' : -', 'this', 'vy', ';']},
    {i: 8, t: 'kv', c: ['return', ';']},
    {i: 4, t: 'v', c: ['}']},
    {i: 4, t: 'z', c: ['// handle collision with the players']},
    {i: 4, t: 'kvmvnv', c: ['if', '(', 'isColliding', '(this, players[', '0', '])) {']},
    {i: 8, t: 'dpomvnv', c: ['this', 'vy', ' = ', 'calculateReturnTrajectory', '(players[', '0', ']);']},
    {i: 8, t: 'dpovnvpovnvpv', c: ['this', 'x', ' = ',  'players[', '0', '].', 'x', ' + ', 'players[', '0', '].', 'width', ';']},
    {i: 8, t: 'vonv', c: ['hit', ' = ', 'true', ';']},
    {i: 8, t: 'vokcvdpvdpvodpvdpvnv', c: ['invisiball', ' = ', 'new ', 'Ball', '(', 'this', 'x', ', ', 'this', 'y', ', ', '-', 'this', 'vx', ', ', 'this', 'vy', ', ', 'true', ');']},
    {i: 4, t: 'vkvmvnv', c: ['} ', 'else if', '(', 'isColliding', '(this, players[', '1', '])) {']},
    {i: 8, t: 'dpomvnv', c: ['this', 'vy', ' = ', 'calculateReturnTrajectory', '(players[', '1', ']);']},
    {i: 8, t: 'dpovnvpodpv', c: ['this', 'x', ' = ', 'players[', '1', '].', 'x', ' - ', 'ball', 'width', ';']},
    {i: 8, t: 'vonv', c: ['hit', ' = ', 'true', ';']},
    {i: 8, t: 'vonv', c: ['invisiball', ' = ', 'undefined', ';']},
    {i: 4, t: 'v', c: ['}']},
    {i: 4, t: 'z', c: ['// handle scoring']},
    {i: 4, t: 'kvdpov', c: ['if', '(', 'this', 'x', ' <= ', 'borderWidth) {']},
    {i: 8, t: 'vnvpov', c: ['players[', '1', '].', 'score', '++', ';']},
    {i: 8, t: 'kvnvpovomvomv', c: ['return ', 'players[', '1', '].', 'score', ' < ', 'winScore', ' ? ', 'reset', '()', ' : ', 'init', '();']},
    {i: 4, t: 'vkvdpodpodpov', c: ['} ', 'else if', '(', 'this', 'x', ' + ', 'this', 'width', ' >= ', 'canvas', 'width', ' - ', 'borderWidth) {']},
    {i: 8, t: 'vnvpov', c: ['players[', '0', '].', 'score', '++', ';']},
    {i: 8, t: 'kvnvpovomvomv', c: ['return ', 'players[', '0', '].', 'score', ' < ', 'winScore', ' ? ', 'reset', '()', ' : ', 'init', '();']},
    {i: 4, t: 'v', c: ['}']},
    {i: 4, t: 'z', c: ['// update the necessary values']},
    {i: 4, t: 'dpovodpodpv', c: ['this', 'vx', ' = ', 'hit', ' ? -', 'this', 'vx', ' : ', 'this', 'vx', ';']},
    {i: 4, t: 'dpodpovodpodpodpovodpodpv', c: ['this', 'vy', ' = ', 'this', 'y',  ' > ', 'borderWidth', ' && ', 'this', 'y', ' + ', 'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'vy', ' : -', 'this', 'vy', ';']},
    {i: 4, t: 'dpodpovov', c: ['this', 'x', ' += ', 'this', 'vx', ' * ', 'horizontalUnit', ' * ', 'deltaTime;']},
    {i: 4, t: 'dpodpovov', c: ['this', 'y', ' += ', 'this', 'vy', ' * ', 'verticalUnit', ' * ', 'deltaTime;']},
    {i: 4, t: 'dpodpovovodpodpodpovodpodpovodpv', c: ['this', 'y', ' = ', 'this', 'y', ' < ', 'borderWidth', ' ? ', 'borderWidth', ' : ', 'this', 'y', ' + ',
        'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'y', ' : ', 'canvas', 'height', ' - ', 'borderWidth', ' - ', 'this', 'height', ';']},
    {i: 0, t: 'v', c: ['};']},
    {}
])}}
