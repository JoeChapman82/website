<div id="fullCodeJs" class="full-code-js js-hidden">
    {{ code.exampleCodeBlock('j', 1, [
        {i: 0, t: 'vkv', c: ['(', 'function', '() {']},
        {i: 4, t: 'kvodxvsv', c: ['var', ' canvas ', '= ', 'document', 'getElementById', '(', '\'demoCanvas\'', ');']},
        {i: 4, t: 'kvodxvsv', c: ['var', ' ctx ', '= ', 'canvas', 'getContext', '(', '\'2d\'', ');']},
        {i: 4, t: 'dposv', c: ['ctx', 'fillStyle',  ' = ', '\'rgb(255, 255, 255)\'', ';']},
        {i: 4, t: 'dposv', c: ['ctx', 'font',  ' = ', '\'bold 48px Arial Black\'', ';']},
        {i: 4, t: 'kv', c: ['var', ' animation;']},
        {i: 4, t: 'kvonv', c: ['var', ' lastTime ', '= ', '0', ';']},
        {i: 4, t: 'kvonv', c: ['var', ' deltaTime ', '= ', '0', ';']},
        {i: 4, t: 'kvonv', c: ['var', ' worldWidth ', '= ', '16', ';']},
        {i: 4, t: 'kvonv', c: ['var', ' worldHeight ', '= ', '9', ';']},
        {i: 4, t: 'kvodpov', c: ['var', ' horizontalUnit ', '= ', 'canvas', 'width', ' / ', 'worldWidth;']},
        {i: 4, t: 'kvodpov', c: ['var', ' verticalUnit ', '= ', 'canvas', 'height', ' / ', 'worldHeight;']},
        {i: 4, t: 'kvov', c: ['var', ' players ', '= ', '[];']},
        {i: 4, t: 'kv', c: ['var', ' ball;']},
        {i: 4, t: 'kv', c: ['var', ' invisiball;']},
        {i: 4, t: 'kvonv', c: ['var', ' borderWidth ', '= ', '10', ';']},
        {i: 4, t: 'kvonv', c: ['var', ' winScore ', '= ', '10', ';']},
        {},


        {i: 4, t: 'kmokv', c: ['var', ' Ball', ' = ', 'function', '(x, y, vx, vy, invisible) {']},
        {i: 8, t: 'dpovodponv', c: ['this', 'x', ' = ', 'x', ' || ', 'canvas', 'width',  ' / ', '2', ';']},
        {i: 8, t: 'dpovodponv', c: ['this', 'y', ' = ', 'y', ' || ', 'canvas', 'height',  ' / ', '2', ';']},
        {i: 8, t: 'dponv', c: ['this', 'width', ' = ', '20', ';']},
        {i: 8, t: 'dponv', c: ['this', 'height', ' = ', '20', ';']},
        {i: 8, t: 'dpovovcvxvonononv', c: ['this', 'vx', ' = ', 'vx', ' || ', '(', 'Math', '.', 'random', '()', ' > ',  '0.5',  ' ? ',  '4', ' : ', '-4', ');']},
        {i: 8, t: 'dpovovcvxvonononv', c: ['this', 'vy', ' = ', 'vy', ' || ', '(', 'Math', '.', 'random', '()', ' > ',  '0.5',  ' ? ',  '4', ' : ', '-4', ');']},
        {i: 8, t: 'dponv', c: ['this', 'vyMax', ' = ', '8', ';']},
        {i: 8, t: 'dpovonv', c: ['this', 'invisible', ' = ', 'invisible', ' || ', 'false', ';']},
        {i: 4, t: 'v', c: ['};']},
        {},

        {i: 4, t: 'ddmokv', c: ['Ball', 'prototype', 'update', ' = ', 'function', '() {']},
        {i: 8, t: 'kvonv', c: ['var', ' hit', ' = ', 'false', ';']},
        {i: 8, t: 'z', c: ['// handle the update for invisible balls']},
        {i: 8, t: 'kvdpv', c: ['if', '(', 'this', 'invisible', ') {']},
        {i: 12, t: 'dpodpovnvpodpodpovovonvonv', c: ['this', 'x', ' += ', 'this', 'x', ' < ', 'players[', '1', '].', 'x', ' - ', 'this', 'width', ' ? ',
            'this', 'vx', ' * ', 'horizontalUnit', ' * ', '(deltaTime', ' * ', '1.5', ')', ' : ', '0', ';']},
         {i: 12, t: 'dpodpovnvpodpodpovovonvonv', c: ['this', 'y', ' += ', 'this', 'x', ' < ', 'players[', '1', '].', 'x', ' - ', 'this', 'width', ' ? ',
            'this', 'vy', ' * ', 'verticalUnit', ' * ', '(deltaTime', ' * ', '1.5', ')', ' : ', '0', ';']},
        {i: 12, t: 'dpodpovodpodpodpovodpodpv', c: ['this', 'vy', ' = ', 'this', 'y', ' > ', 'borderWidth', ' && ', 'this', 'y', ' + ',
            'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'vy', ' : -', 'this', 'vy', ';']},
        {i: 12, t: 'kv', c: ['return', ';']},
        {i: 8, t: 'v', c: ['}']},
        {i: 8, t: 'z', c: ['// handle collision with the players']},
        {i: 8, t: 'kvmvnv', c: ['if', '(', 'isColliding', '(this, players[', '0', '])) {']},
        {i: 12, t: 'dpomvnv', c: ['this', 'vy', ' = ', 'calculateReturnTrajectory', '(players[', '0', ']);']},
        {i: 12, t: 'dpovnvpovnvpv', c: ['this', 'x', ' = ',  'players[', '0', '].', 'x', ' + ', 'players[', '0', '].', 'width', ';']},
        {i: 12, t: 'vonv', c: ['hit', ' = ', 'true', ';']},
        {i: 12, t: 'vokcvdpvdpvodpvdpvnv', c: ['invisiball', ' = ', 'new ', 'Ball', '(', 'this', 'x', ', ', 'this', 'y', ', ', '-', 'this', 'vx', ', ', 'this', 'vy', ', ', 'true', ');']},
        {i: 8, t: 'vkvmvnv', c: ['} ', 'else if', '(', 'isColliding', '(this, players[', '1', '])) {']},
        {i: 12, t: 'dpomvnv', c: ['this', 'vy', ' = ', 'calculateReturnTrajectory', '(players[', '1', ']);']},
        {i: 12, t: 'dpovnvpodpv', c: ['this', 'x', ' = ', 'players[', '1', '].', 'x', ' - ', 'ball', 'width', ';']},
        {i: 12, t: 'vonv', c: ['hit', ' = ', 'true', ';']},
        {i: 12, t: 'vonv', c: ['invisiball', ' = ', 'undefined', ';']},
        {i: 8, t: 'v', c: ['}']},
        {i: 8, t: 'z', c: ['// handle scoring']},
        {i: 8, t: 'kvdpov', c: ['if', '(', 'this', 'x', ' <= ', 'borderWidth) {']},
        {i: 12, t: 'vnvpov', c: ['players[', '1', '].', 'score', '++', ';']},
        {i: 12, t: 'kvnvpovomvomv', c: ['return ', 'players[', '1', '].', 'score', ' < ', 'winScore', ' ? ', 'reset', '()', ' : ', 'init', '();']},
        {i: 8, t: 'vkvdpodpodpov', c: ['} ', 'else if', '(', 'this', 'x', ' + ', 'this', 'width', ' >= ', 'canvas', 'width', ' - ', 'borderWidth) {']},
        {i: 12, t: 'vnvpov', c: ['players[', '0', '].', 'score', '++', ';']},
        {i: 12, t: 'kvnvpovomvomv', c: ['return ', 'players[', '0', '].', 'score', ' < ', 'winScore', ' ? ', 'reset', '()', ' : ', 'init', '();']},
        {i: 8, t: 'v', c: ['}']},
        {i: 8, t: 'z', c: ['// update the necessary values']},
        {i: 8, t: 'dpovodpodpv', c: ['this', 'vx', ' = ', 'hit', ' ? -', 'this', 'vx', ' : ', 'this', 'vx', ';']},
        {i: 8, t: 'dpodpovodpodpodpovodpodpv', c: ['this', 'vy', ' = ', 'this', 'y',  ' > ', 'borderWidth', ' && ', 'this', 'y', ' + ', 'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'vy', ' : -', 'this', 'vy', ';']},
        {i: 8, t: 'dpodpovov', c: ['this', 'x', ' += ', 'this', 'vx', ' * ', 'horizontalUnit', ' * ', 'deltaTime;']},
        {i: 8, t: 'dpodpovov', c: ['this', 'y', ' += ', 'this', 'vy', ' * ', 'verticalUnit', ' * ', 'deltaTime;']},
        {i: 8, t: 'dpodpovovodpodpodpovodpodpovodpv', c: ['this', 'y', ' = ', 'this', 'y', ' < ', 'borderWidth', ' ? ', 'borderWidth', ' : ', 'this', 'y', ' + ',
            'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'y', ' : ', 'canvas', 'height', ' - ', 'borderWidth', ' - ', 'this', 'height', ';']},
        {i: 4, t: 'v', c: ['};']},
        {},


        {i: 4, t: 'kmokv', c: ['var', ' Player', ' = ', 'function', '(courtSide, isHuman) {']},
        {i: 8, t: 'dpov', c: ['this', 'courtSide', ' = ', 'courtSide;']},
        {i: 8, t: 'dpovosonodponv', c: ['this', 'x', ' = ', 'courtSide', ' === ', '\'left\'', ' ? ',  ' 10 ', ' : ', 'canvas', 'width', ' - ', '30', ';']},
        {i: 8, t: 'dpodponv', c: ['this', 'y', ' = ', 'canvas', 'height',  ' / ', '2', ';']},
        {i: 8, t: 'dponv', c: ['this', 'width', ' = ', '15', ';']},
        {i: 8, t: 'dponv', c: ['this', 'height', ' = ', '80', ';']},
        {i: 8, t: 'dponv', c: ['this', 'vy', ' = ', '4;']},
        {i: 8, t: 'dponv', c: ['this', 'upPressed', ' = ', 'false', ';']},
        {i: 8, t: 'dponv', c: ['this', 'downPressed', ' = ', 'false', ';']},
        {i: 8, t: 'dpov', c: ['this', 'isHuman', ' = ', 'isHuman;']},
        {i: 8, t: 'dponv', c: ['this', 'score', ' = ',  '0', ';']},
        {i: 4, t: 'v', c: ['};']},
        {},

        {i: 4, t: 'ddmokv', c: ['Player', 'prototype', 'update', ' = ', 'function', '() {']},
        {i: 8, t: 'kvodpodponv', c: ['var', ' center', ' = ', 'this', 'y', ' + ', 'this', 'width', ' / ', '2', ';']},
        {i: 8, t: 'kvodpovov', c: ['var', ' increment', ' = ', 'this', 'vy', ' * ', 'verticalUnit', ' * ', 'deltaTime;']},
        {i: 8, t: 'kvdpv', c: ['if', '(', 'this', 'isHuman', ') {']},
        {i: 12, t: 'dpodpovodpovonv', c: ['this', 'y', ' += ', 'this', 'upPressed', ' ? -', 'increment', ' : ', 'this', 'downPressed', ' ? ', 'increment', ' : ', '0', ';']},
        {i: 8, t: 'vkv', c: ['} ', 'else ', '{']},
        {i: 12, t: 'kvdposodponodponodposv', c: ['if', '(', 'this', 'courtSide', ' === ', '\'right\'', ' && ', 'ball', 'vx', ' > ', '0', ' || ',
            'ball', 'vx', ' < ', '0', ' && ', 'this', 'courtSide', ' === ', '\'left\'', ') {']},
        {i: 16, t: 'dpovovdpovovovovdpovovov', c: ['this', 'y', ' += ', 'invisiball', ' ? ', '(', 'invisiball', 'y', ' >= ', 'center', ' ? ', 'increment', ' : -', 'increment)',
            ' : ', '(', 'ball', 'y', ' >= ', 'center', ' ? ', 'increment', ' : -', 'increment);']},
        {i: 12, t: 'v', c: ['}']},
        {i: 8, t: 'v', c: ['}']},
        {i: 8, t: 'dpodpovovodpodpodpovodpodpovodpv', c: ['this', 'y', ' = ', 'this', 'y', ' < ', 'borderWidth', ' ? ', 'borderWidth', ' : ', 'this', 'y', ' + ',
            'this', 'height', ' < ', 'canvas', 'height', ' - ', 'borderWidth', ' ? ', 'this', 'y', ' : ', 'canvas', 'height', ' - ', 'borderWidth', ' - ', 'this', 'height', ';']},
        {i: 4, t: 'v', c: ['};']},
        {},


        {i: 4, t: 'kmv', c: ['function', ' setDeltaTime', '(time) {']},
        {i: 8, t: 'vovovononovovononv', c: ['deltaTime', ' = ', '(time', ' - ', 'lastTime)', ' / ', '1000', ' <= ', '0.5', ' ? ', '(time', ' - ', 'lastTime)', ' / ', '1000',' : ', '0.167',';']},
        {i: 8, t: 'vov', c: ['lastTime', ' = ', 'time;']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' calculateReturnTrajectory', '(player) {']},
        {i: 8, t: 'kvodpovdponv', c: ['var', ' paddleCenter', ' = ', 'player', 'y', ' + ', '(', 'player', 'height', ' / ', '2', ');']},
        {i: 8, t: 'kvodpovdponv', c: ['var', ' ballCenter', ' = ', 'ball', 'y', ' + ', '(', 'ball', 'height', ' / ', '2', ');']},
        {i: 8, t: 'kvovov', c: ['var', ' difference', ' = ', 'paddleCenter', ' - ', 'ballCenter;']},
        {i: 8, t: 'kvocvxvovdponvodpv', c: ['var', ' trajectory', ' = ', 'Math', '.', 'abs', '(difference)', ' / ', '(', 'player', 'height', ' / ', '2', ')', ' * ', 'ball', 'vyMax', ';']},
        {i: 8, t: 'kvonovoov', c: ['return',  ' difference', ' <= ', '0', ' ? ', 'trajectory',  ' : ', '-', 'trajectory;']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' isColliding', '(ob1, ob2) {']},
        {i: 8, t: 'kdpodpodpodpodpodpodpodpodpodpodpodpv', c: ['return', ' ob2', 'x', ' + ', 'ob2', 'width', ' >= ', 'ob1', 'x', ' && ',
                            'ob2', 'x', ' <= ', 'ob1', 'x', ' + ', 'ob1', 'width', ' && ',
                             'ob2', 'y', ' + ', 'ob2', 'height', ' >= ', 'ob1', 'y', ' && ',
                              'ob2', 'y', ' <= ', 'ob1', 'y', ' + ', 'ob1', 'height', ';']},
        {i: 4, t: 'v', c: ['}']},
        {},


        {i: 4, t: 'kmv', c: ['function', ' renderRect', '(x, y, width, height) {']},
        {i: 8, t: 'dmv', c: ['ctx', 'beginPath', '();']},
        {i: 8, t: 'dmv', c: ['ctx', 'rect', '(x, y, width, height);']},
        {i: 8, t: 'dmv', c: ['ctx', 'fill', '();']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' renderBackground', '(x, y, width, height) {']},
        {i: 8, t: 'dposv', c: ['ctx', 'fillStyle',  ' = ', '\'rgba(22, 22, 22, 1)\'', ';']},
        {i: 8, t: 'mvnvnvdpvdpv', c: ['renderRect', '(', '0', ', ', '0', ', ', 'canvas', 'width', ', ', 'canvas', 'height' ,');']},
        {i: 8, t: 'dposv', c: ['ctx', 'fillStyle',  ' = ', '\'rgba(255, 255, 255, 1)\'', ';']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' renderCentralLine', '() {']},
        {i: 8, t: 'kvkvonvovov', c: ['for', '(', 'var', ' i', ' = ', '0', '; i', ' <= ', 'worldHeight; i', '++', ') {']},
        {i: 12, t: 'mvdpononvovonvnvonv', c: ['renderRect', '(', 'canvas', 'width', ' / ', '2', ' - ', '8', ', i', ' * ', 'verticalUnit', ' + ', '6', ', ', '16', ', verticalUnit', ' / ', '1.75', ');']},
        {i: 8, t: 'v', c: ['}']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' renderBorder', '() {']},
        {i: 8, t: 'mvnvnvdpv', c: ['renderRect', '(', '0', ', ', '0', ', ', 'canvas', 'width', ', borderWidth);']},
        {i: 8, t: 'mvnvdpovdpv', c: ['renderRect', '(', '0', ', ', 'canvas', 'height', ' - ', 'borderWidth, ', 'canvas', 'width', ', borderWidth);']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' renderScore', '() {']},
        {i: 8, t: 'dposv', c: ['ctx', 'textBaseline',  ' = ', '\'hanging\'', ';']},
        {i: 8, t: 'dposv', c: ['ctx', 'textAlign',  ' = ', '\'end\'', ';']},
        {i: 8, t: 'dmvnvpvdponov', c: ['ctx', 'fillText', '(players[', '0', '].', 'score', ', ', 'canvas', 'width', ' / ', '2', ' - ', 'borderWidth, borderWidth);']},
        {i: 8, t: 'dposv', c: ['ctx', 'textAlign',  ' = ', '\'start\'', ';']},
        {i: 8, t: 'dmvnvpvdponovvv', c: ['ctx', 'fillText', '(players[', '1', '].', 'score', ', ', 'canvas', 'width', ' / ', '2', ' + ', 'borderWidth', ', ', 'borderWidth);']},
        {i: 4, t: 'v', c: ['}']},
        {},

        {i: 4, t: 'kmv', c: ['function', ' init', '() {']},
        {i: 8, t: 'dponv', c: ['players', 'length', ' = ', '0', ';']},
        {i: 8, t: 'vokcv', c: ['ball', ' = ', 'new', ' Ball', '();']},
        {i: 8, t: 'dxvkcvsvnvkcvsvnv', c: ['players', 'push', '(', 'new', ' Player', '(', '\'left\'', ', ', 'true', '), ', 'new', ' Player', '(', '\'right\'', ', ', 'false', '));']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' reset', '() {']},
        {i: 8, t: 'vokcv', c: ['ball', ' = ', 'new', ' Ball', '();']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'kmv', c: ['function', ' main', '(time) {']},
        {i: 8, t: 'dmvnvnvdpvdpv', c: ['ctx', 'clearRect', '(' , '0', ', ', '0', ', ', 'canvas', 'width', ', ', 'canvas' , 'height', ');']},
        {i: 8, t: 'mv', c: ['setDeltaTime', '(time);']},
        {i: 8, t: 'mv', c: ['renderBackground', '();']},
        {i: 8, t: 'mv', c: ['renderCentralLine', '();']},
        {i: 8, t: 'mv', c: ['renderBorder', '();']},
        {i: 8, t: 'mv', c: ['renderScore', '();']},
        {i: 8, t: 'dmv', c: ['ball', 'update', '();']},
        {i: 8, t: 'mvdpvdpvdpvdpv', c: ['renderRect', '(', 'ball', 'x', ', ', 'ball', 'y', ', ', 'ball', 'width', ', ', 'ball', 'height' ,');']},
        {i: 8, t: 'dxvkv', c: ['players', 'forEach', '(', 'function', '(player) {']},
        {i: 8, t: 'dmv', c: ['player', 'update', '();']},
        {i: 12, t: 'mvdpvdpvdpvdpv', c: ['renderRect', '(', 'player', 'x', ', ', 'player', 'y', ', ', 'player', 'width', ', ', 'player', 'height' ,');']},
        {i: 8, t: 'v', c: ['});']},
        {i: 8, t: 'kv', c: ['if', '(invisiball) {']},
        {i: 12, t: 'dmv', c: ['invisiball', 'update', '();']},
        {i: 8, t: 'v', c: ['}']},
        {i: 8, t: 'mv', c: ['requestAnimationFrame', '(main);']},
        {i: 4, t: 'v', c: ['}']},
        {},
        {i: 4, t: 'mv', c: ['init', '();']},
        {i: 4, t: 'vomv', c: ['animation', ' = ', 'requestAnimationFrame', '(main);']},
        {},


        {i: 4, t: 'dxvsvkv', c: ['document', 'addEventListener', '(', '\'keydown\'', ', ', 'function', '(e) {']},
        {i: 8, t: 'kvdponv', c: ['if', '(', 'e', 'keyCode', ' === ', '38', ') {']},
        {i: 12, t: 'dxv', c: ['e', 'preventDefault', '();']},
        {i: 12, t: 'vnvponv', c: ['players[', '0', '].', 'upPressed', ' = ', 'true', ';']},
        {i: 8, t: 'vkvdponv', c: ['} ', 'else if', '(', 'e', 'keyCode', ' === ', '40', ') {']},
        {i: 12, t: 'dxv', c: ['e', 'preventDefault', '();']},
        {i: 12, t: 'vnvponv', c: ['players[', '0', '].', 'downPressed', ' = ', 'true', ';']},
        {i: 8, t: 'v', c: ['}']},
        {i: 4, t: 'v', c: ['});']},
        {},
        {i: 4, t: 'dxvsvkv', c: ['document', 'addEventListener', '(', '\'keyup\'', ', ', 'function', '(e) {']},
        {i: 8, t: 'kvdponv', c: ['if', '(', 'e', 'keyCode', ' === ', '38', ') {']},
        {i: 12, t: 'vnvponv', c: ['players[', '0', '].', 'upPressed', ' = ', 'false', ';']},
        {i: 8, t: 'vkvdponv', c: ['} ', 'else if', '(', 'e', 'keyCode', ' === ', '40', ') {']},
        {i: 12, t: 'vnvponv', c: ['players[', '0', '].', 'downPressed', ' = ', 'false', ';']},
        {i: 8, t: 'v', c: ['}']},
        {i: 4, t: 'v', c: ['});']},
        {},

        {i: 0, t: 'v', c: ['})();']}
    ])}}
</div>
